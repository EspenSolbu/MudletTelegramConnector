<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage />
	<TimerPackage />
	<AliasPackage />
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Telegram Connector</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
		</ScriptGroup>
		<Script isActive="yes" isFolder="no">
			<name>TelegramMainScript</name>
			<packageName></packageName>
			<script>-- #########################################################################
-- TODO
--  * Add #COMMANDS
--    * #TELEGRAM CONFIGURE
--    * #TELEGRAM ENABLE/DISABLE
--    * #TELEGRAM VERSION
--    * #TELEGRAM HELP
--    * #TELEGRAM UPDATE
--    * #HELP
--    * #VERSION
--    * #ABOUT
-- #########################################################################

-- Telegram configure 
--    -&gt; collect and store Token and update interval
--    -&gt; also allow setting a char name, or use Profile Name
--    -&gt; also allowed "senders"

-- 

Telegram = Telegram or {}
Telegram.Version = "0.0.0"
Telegram.PackageName = "Telegram Connector"
-- should be gotten from separate config lua, if not exists, then request it

Telegram.Options = {}



Telegram.MyName = Telegram.MyName or getProfileName()
Telegram.UpdateInterval = Telegram.UpdateInterval or 10 -- seconds
Telegram.Enabled = Telegram.Enabled or true
Telegram.Enabled = true



Telegram.EventHandlerIds = Telegram.EventHandlerIds or {}
Telegram.AliasHandlerIds = Telegram.AliasHandlerIds or {}

Telegram.URL = "https://api.telegram.org/bot"
Telegram.getReturnHandler = Telegram.getReturnHandler or nil
Telegram.getUpdateTimerId = Telegram.getUpdateTimerId or nil
Telegram.LastIdHandled = Telegram.LastIdHandled or -1
--Telegram.LastIdHandled = -1

local URL_GETUPDATES=nil
local URL_SENDMESSAGE=nil



local lineBuffer = {}
local current_message_id = -1
local current_chat_id = -1


function Telegram:SaveConfig()
  cecho("&lt;cyan&gt;Saving Telegram config...\n")
  table.save(getMudletHomeDir().."/telegram_options.lua", Telegram.Options)
end

function Telegram:SetToken(token)
  Telegram.Options["Token"] = token
  Telegram:UpdateUrls()
  
  
end

function Telegram:UpdateUrls()
  if Telegram.Options["Token"]~=nil then
    URL_GETUPDATES=Telegram.URL..Telegram.Options.Token.."/getUpdates"
    URL_SENDMESSAGE=Telegram.URL..Telegram.Options.Token.."/sendMessage"
  end
end

function Telegram:LoadConfig()
  if io.exists(getMudletHomeDir().."/telegram_options.lua") then
    cecho("&lt;cyan&gt;Loading Telegram config...\n")
    table.load(getMudletHomeDir().."/telegram_options.lua", Telegram.Options) -- using / is OK on Windows too.
  else -- save it if it doesnt exits
    cecho("&lt;cyan&gt;Creating new Telegram config...\n")
    Telegram:DeleteConfig()
    Telegram:SaveConfig()
    Telegram:Reset()
  end
  Telegram:UpdateUrls()
end


function Telegram:HandleUserCommand(cmd,args)
  --print("HandleUserCommand")
  --display(cmd)
  --display(args)
  
  cmd = string.lower(cmd)
  
  local cmdA = string.split(args," ")
  sub_cmd = string.lower(table.remove(cmdA,1))
  sub_args = table.concat(cmdA," ")
  
  if (cmd=="help") then         -- Hook to global #HELP
    Telegram:showHelp()
  elseif (cmd=="version") then  -- Hook to global #VERSION
    Telegram:showVersion()
  elseif (cmd=="about") then    -- Hook to global #ABOUT
    Telegram:showAbout()
  -- Package specific below
  elseif (cmd=="telegram") then
    if sub_cmd=="" then
      Telegram:showHelp()
      Telegram:showStatus()
    elseif sub_cmd=="enable" then
      Telegram.Enabled = true
      cecho("&lt;green&gt;"..Telegram.PackageName.." ENABLED\n")
      --Telegram:showStatus()
    elseif sub_cmd=="disable" then
      Telegram.Enabled = false
      cecho("&lt;orange&gt;"..Telegram.PackageName.." DISABLED\n")
      --Telegram:showStatus()
    elseif sub_cmd=="version" then
      Telegram:showVersion()
    elseif sub_cmd=="help" then
      Telegram:showHelp()
    elseif sub_cmd=="about" then
      Telegram:showAbout()
    elseif sub_cmd=="status" then
      Telegram:showStatus()
    elseif sub_cmd=="delete" then
      Telegram:DeleteConfig()
      Telegram:SaveConfig()
      Telegram:Reset()
    elseif sub_cmd=="token" then
      Telegram:SetToken(sub_args)
      Telegram:CheckConfig()
      Telegram:SaveConfig()
    elseif sub_cmd=="auth" or sub_cmd=="authorize" then
      Telegram:Authorize(sub_args)
    elseif sub_cmd=="unauth" then
      Telegram:UnAuthorize(sub_args)
    elseif sub_cmd=="interval" then
      Telegram:SetInterval(sub_args)
    elseif sub_cmd=="tell" then
    
      local msgA = string.split(sub_args," ")
      local username = table.remove(msgA,1)
      local msg = table.concat(msgA," ")
    
      Telegram:Tell(username, msg)
    elseif sub_cmd=="whisper" then
    
      local msgA = string.split(sub_args," ")
      local username = table.remove(msgA,1)
      local msg = table.concat(msgA," ")
    
      Telegram:Tell(username, msg, true)
    end 
    --local subcmd = 
  end
end

function Telegram:showHelp()
  cecho("&lt;cyan&gt;".. Telegram.PackageName ..":\n")
  cecho(string.format("&lt;cyan&gt;%-30s- %s\n",string.format(" %s","#HELP"),"Show Helpfile(s)"))
  cecho(string.format("&lt;cyan&gt;%-30s- %s\n",string.format(" %s","#VERSION"),"Show version(s)"))
  cecho(string.format("&lt;cyan&gt;%-30s- %s\n",string.format(" %s","#TELEGRAM STATUS"),"Show Telegram Status"))
  cecho(string.format("&lt;cyan&gt;%-30s- %s\n",string.format(" %s","#TELEGRAM TOKEN &lt;token&gt;"),"Set Telegram Token"))
  cecho(string.format("&lt;cyan&gt;%-30s- %s\n",string.format(" %s","#TELEGRAM UPDATE"),"Upgrade the package"))
  cecho(string.format("&lt;cyan&gt;%-30s- %s\n",string.format(" %s","#TELEGRAM INTERVAL &lt;seconds&gt;"),"Set polling interval, default 10s"))
  cecho(string.format("&lt;cyan&gt;%-30s- %s\n",string.format(" %s","#TELEGRAM TELL &lt;username&gt; &lt;message&gt;"),"Send a message to a telegram user"))
  cecho(string.format("&lt;cyan&gt;%-30s- %s\n",string.format(" %s","#TELEGRAM WHISPER &lt;username&gt; &lt;message&gt;"),"Send a message to a telegram user (no notification)"))
  cecho(string.format("&lt;cyan&gt;%-30s- %s\n",string.format(" %s","#TELEGRAM ENABLE/DISABLE"),"Enable or Disable the package"))
  cecho(string.format("&lt;cyan&gt;%-30s- %s\n",string.format(" %s","#TELEGRAM AUTH &lt;name&gt;"),"Authorize a Telegram user."))
  cecho(string.format("&lt;cyan&gt;%-30s- %s\n",string.format(" %s","#TELEGRAM UNAUTH &lt;name&gt;"),"UnAuthorize a Telegram user."))
  cecho("&lt;cyan&gt;---------------------------------------------------------------------------------------\n")
  print()
end

function Telegram:showAbout()
  print("Show about")
end

function Telegram:SetInterval(seconds)
  local s = tonumber(seconds)
  if s then
    cecho("&lt;green&gt;Set Telegram polling inverval to "..s.." seconds\n")
    Telegram.Options.Interval=s
    Telegram:SaveConfig()
    if Telegram.getUpdateTimerId~=nil then
      killTimer(Telegram.getUpdateTimerId)
    end
    Telegram.getUpdateTimerId = tempTimer(Telegram.Options.Interval,[[Telegram:getUpdates()]],true)
  else
    cecho("&lt;orange&gt;'"..seconds.."' is not a valid interval...\n")
  end
end

function Telegram:Authorize(name)
  --print("authorize")
  if Telegram.Options.PendingAuthorization[name]~=nil then
    Telegram.Options.Authorized[name]=Telegram.Options.PendingAuthorization[name]
    Telegram.Options.PendingAuthorization[name]=nil
    cecho("&lt;green&gt;Authorized '"..name.."' for Telegram usage. You can now also send messages using\n")
    cecho("&lt;green&gt;#TELEGRAM TELL "..name.." &lt;message&gt;\n")    
    Telegram.SaveConfig()
    
  else
    cecho("&lt;orange&gt;'"..name.."' not pending authorization, have him/her send a message to the bot first...\n")
  end
end

function Telegram:UnAuthorize(name)
  --print("authorize")
  if Telegram.Options.Authorized[name]~=nil then
    Telegram.Options.Authorized[name]= nil
    Telegram.Options.PendingAuthorization[name]=nil
    cecho("&lt;green&gt;UnAuthorized '"..name.."' for Telegram usage. \n")
    
    Telegram.SaveConfig()
    
  else
    cecho("&lt;orange&gt;'"..name.."' not authorized, nothing done...\n")
  end
end

function Telegram:showStatus()
  cecho("&lt;cyan&gt;---------------------------- TELEGRAM CONNECTOR STATUS --------------------------------\n")
  Telegram:showVersion()
  cecho("&lt;cyan&gt;Token: '"..Telegram.Options["Token"].."'\n")
  cecho("&lt;cyan&gt;Enabled: '"..tostring(Telegram.Options.Enabled).."'\n")
  cecho("&lt;cyan&gt;Polling Interval: "..Telegram.Options.Interval.." seconds\n")
  -- interval
  -- last id handled
  
  -- authorized
  cecho("&lt;cyan&gt;Authorized:\n")
  local countAuthorized =0
  local countPending =0
  for _ in pairs(Telegram.Options.Authorized) do countAuthorized = countAuthorized + 1 end
  for _ in pairs(Telegram.Options.PendingAuthorization) do countPending = countPending + 1 end
  
  if countAuthorized&gt;0 then
    for name,v in pairs(Telegram.Options.Authorized) do
      cecho("\t&lt;green&gt;"..name.."\n")
    end
  else
    cecho("\t&lt;orange&gt;NONE!\n")
  end
  -- pending authorization
  if countPending&gt;0 then
    cecho("&lt;cyan&gt;Pending Authorization:\n")
    for name,v in pairs(Telegram.Options.PendingAuthorization) do
      cecho("\t&lt;orange&gt;"..name.."\n")
    end
  end
  -- ignored
  
  cecho("&lt;cyan&gt;---------------------------------------------------------------------------------------\n")
  Telegram:Reset()
  Telegram:CheckConfig()
  Telegram:getUpdates()
end

function Telegram:showVersion()
  --local vline = Telegram:checkVersion()
  --cecho(string.format("&lt;cyan&gt;%-50s: %s %s\n","Cross Profile Communication",cpc.version,vline))
  cecho(string.format("&lt;cyan&gt;%-50s: %s\n","Telegram Connector",Telegram.Version))
end


function Telegram:DeleteConfig()
  cecho("&lt;cyan&gt;Deleting Telegram config...\n")
  Telegram.Options = {}
  Telegram.Options.Authorized={}
  Telegram.Options.PendingAuthorization = {} -- populate from file
  Telegram.Options.Enabled = true
  Telegram.Options.Token=""
  Telegram.Options.Interval=10
  Telegram:UpdateUrls()
end

function Telegram:getInitialUpdates()
  --getHTTP(Telegram.URL..Telegram.Token.."/getUpdates")
  --print("getUpdates")
  if Telegram.Options.Enabled and Telegram.Options.Token~="" then
    --print("enabled, getUpdates")
    getHTTP(URL_GETUPDATES)
  end
end

function Telegram:getUpdates()
  --getHTTP(Telegram.URL..Telegram.Token.."/getUpdates")
  --print("getUpdates")
  if Telegram.Options.Enabled and Telegram.Options.Token~="" then
  --print("enabled, getUpdates")
  --getHTTP(URL_GETUPDATES)
    local header = {["Content-Type"] = "application/json"}
    local opts = {}
    opts["allowed_updates"] = {"message"}
    if Telegram.LastIdHandled == -1 then
      opts["offset"] = -2
    else
      opts["offset"] = Telegram.LastIdHandled+1
    end
    --opts["limit"] = 10
    
    --display(opts)
    postHTTP(yajl.to_string(opts),URL_GETUPDATES,header)
  end
end

function Telegram:onHttpPost(event, ...)
  if event=="sysPostHttpError" then
    if string.find(arg[1],"telegram")~=nil then
      display(arg)
    end
  else
    
    local content = yajl.to_value(arg[2])
    local url = arg[1]      -- use this to check if this is a telegram message, and if so what type
    local response = arg[3] -- not sure what to use this for
    
    --if string.starts(url,Telegram.URL) then
    if url:starts("https://api.telegram.org") then    -- we only care about telegram messages
      
      if url == URL_GETUPDATES then
        
        --display(url)
        --print("getUpdates!")
        --display(content)
        --display(content["ok"])
        --display(content["result"])
        if content["ok"] then
          --print("content ok")
          --display(content)
          Telegram:ParseUpdates(content["result"])
          --display("Parse done")
        else
          cecho("&lt;orange&gt;getUpdates was not successful, check URL\n")
          display(arg)
        end
      end
    end
    
  end
  --display(arg)
end



function Telegram:onHttpGetDone(event, ...)
  --print("GetReturned")
  --display(arg)
  --display(arg[2])
  local content = yajl.to_value(arg[2])
  local url = arg[1]      -- use this to check if this is a telegram message, and if so what type
  local response = arg[3] -- not sure what to use this for
  
  
  --display(event)
  
  --display(url)
  
  --if string.starts(url,Telegram.URL) then
  if url:starts("https://api.telegram.org") then    -- we only care about telegram messages
    if url == URL_GETUPDATES then
      --print("getUpdates!")
      --display(content)
      --display(content["ok"])
      --display(content["result"])
      if content["ok"] then
      
        Telegram:ParseUpdates(content["result"])

      else
        cecho("&lt;orange&gt;getUpdates was not successful, check URL\n")
        display(arg)
      end
    else
      cecho("&lt;orange&gt;GET Not handled\n")
      display(url)
      display(contents)
    end
  end
  
end

function Telegram:Reset()
  Telegram.LastIdHandled=-1
  Telegram:UpdateUrls()
end

function Telegram:ParseUpdates(contents)
  --print("ParseUpdates")
  --display(contents)
  if Telegram.LastIdHandled==-1 then
    print("just loaded, update lasthandled to..")
    --display(contents[#contents])
    --Telegram.LastIdHandled = contents[#contents]["message"]["message_id"]
    for i,m in pairs(contents) do
      if m["message"]~=nil then
        if m["message"]["message_id"] then
          Telegram.LastIdHandled = m["message"]["message_id"]
        end
      end
    end
    
    print("Last id handled set to:"..Telegram.LastIdHandled)
  end
  
  for i,m in pairs(contents) do
    
    if m["message"]==nil then
      --print("system message, ignore")
    else
      
      local t = m["message"]["chat"]["type"]  -- private or group
      
      local message_id = m["message"]["message_id"]
      local chat_id = m["message"]["chat"]["id"]
      local from_id = m["message"]["from"]["id"]
      local sender_id = m["message"]["from"]["id"]
      local cmd = m["message"]["text"]
      local from_username = m["message"]["from"]["username"]
      
      
      
      --print(t)
      --print(message_id)
      --print(channel_id)
      --print(sender_id)
      --print(cmd)
      --print("have i handled this? "..message_id)
      if message_id&gt;Telegram.LastIdHandled then
        --print("no")
        --print(message_id.."/"..Telegram.LastIdHandled.." "..cmd)
        if t=="group" then
          -- is this message for me?
          cmdA = cmd:split(" ")
          local cmdName = string.lower(cmdA[1])
          if string.find(cmdName,string.lower(Telegram.MyName))~=nil then
            --print("This command is for me, execute it")
            -- remove first word
            --display(cmd)
            --cmdA = string.split(cmd," ")
            --display(cmdA)
            table.remove(cmdA,1)
            --display(cmdA)
            cmd = table.concat(cmdA," ")
            --Telegram:HandleCommand(cmd,message_id,chat_id)
          else
            print("This command is for '"..cmdName.."', i am '"..Telegram.MyName.."', Ignore it...")
            cmd = nil
          end
          --print("Name")
          --print(cmdA[1])
        else
          -- private message, just execute it
          --Telegram:HandleCommand(cmd,message_id,chat_id)
        end
        if cmd~=nil then
          --display("cmd not nil")
          --display(from_username)
          --display(Telegram:CheckAuthorized(from_username))
          if Telegram:CheckAuthorized(from_username) then
            Telegram:HandleCommand(cmd,message_id,chat_id,from_username)
          else
            --display(m)
            cecho("&lt;orange&gt;Telegram (".. from_username .." UNAUTHORIZED) has asked me to: '"..cmd.."'\n")
            cecho("&lt;orange&gt;#TELEGRAM AUTH "..from_username.." to authorize\n")
            cecho("&lt;orange&gt;#TELEGRAM IGNORE "..from_username.." to ignore future requests\n")
            -- add to pending approvals
            Telegram.Options.PendingAuthorization[from_username]=from_id
            
            --display(Telegram.Options.PendingAuthorization)
        
          
            local msg = "&lt;b&gt;"..Telegram:HtmlEncode("Command ignored....\nUser '"..from_username.."' not authorized\n#TELEGRAM AUTH "..from_username.." in Mudlet to Authorize.").."&lt;/b&gt;"
            
            local retMsg = {}
            retMsg["chat_id"]=chat_id
            retMsg["text"]=msg
            retMsg["reply_to_message_id"]=message_id
            retMsg["disable_notification"]=true
            retMsg["parse_mode"]="HTML"
            
            current_message_id = message_id
            current_chat_id = chat_id
            
            --local header = {["Content-Type"] = "application/json"}
            --postHTTP(yajl.to_string(retMsg),URL_SENDMESSAGE,header)
            
            Telegram:SendMessage(retMsg)
            Telegram.LastIdHandled = message_id
            
          end
        else
          -- just update the id
          Telegram.LastIdHandled = message_id
        end
      end
    
    end
  end
end

function Telegram:HtmlEncode(str)
  str = string.gsub(str,"&amp;","&amp;amp;")
  str = string.gsub(str,"&lt;","&amp;lt;")
  str = string.gsub(str,"&gt;","&amp;gt;")
  return str
end

function Telegram:CaptureLine(...)
  if isPrompt() then
    killTrigger(Telegram.lineTriggerId)
    Telegram.lineTriggerId = nil
    --display(lineBuffer)
    
    local htmlMsg = Telegram:HtmlEncode(table.concat(lineBuffer,"\n")) 
    
    local retMsg = {}
    retMsg["chat_id"]=current_chat_id
    --retMsg["text"]="&lt;pre&gt;"..table.concat(lineBuffer,"\n").."&lt;/pre&gt;"
    retMsg["text"]="&lt;pre&gt;"..htmlMsg.."&lt;/pre&gt;"
    retMsg["reply_to_message_id"]=current_message_id
    retMsg["disable_notification"]=true
    retMsg["parse_mode"]="HTML"
  
  --local header = {["Content-Type"] = "application/json"}
  --postHTTP(yajl.to_string(retMsg),URL_SENDMESSAGE,header)
  Telegram:SendMessage(retMsg)
    
    
  else
    -- dont add prompt
    table.insert(lineBuffer,line)
  end
end

function Telegram:Tell(username,msg,disable_notification)
  --print("try to send message to telegram...")
  disable_notification = disable_notification or false
  --display(username)
  --display(msg)
  if Telegram.Options.Authorized[username]~=nil then
    local htmlMsg = Telegram:HtmlEncode(msg) 
    local retMsg = {}
    retMsg["chat_id"]=Telegram.Options.Authorized[username]
    
    --retMsg["text"]="&lt;pre&gt;"..table.concat(lineBuffer,"\n").."&lt;/pre&gt;"
    --retMsg["text"]="&lt;pre&gt;"..htmlMsg.."&lt;/pre&gt;"
    retMsg["text"]=msg
    --retMsg["reply_to_message_id"]=current_message_id
    retMsg["disable_notification"]= disable_notification
    --retMsg["parse_mode"]="HTML"
    --display(retMsg)
    Telegram:SendMessage(retMsg)
  else
    cecho("&lt;orange&gt;'"..username.."' is not authorized, use:\n")
    cecho("&lt;orange&gt;#TELEGRAM AUTH "..username.."\n")
  end
end

function Telegram:SendMessage(msgTable)
  local header = {["Content-Type"] = "application/json"}
  Telegram:UpdateUrls()
  --print("url: "..URL_SENDMESSAGE)
  cecho("&lt;cyan&gt;Sending to telegram...\n")
  postHTTP(yajl.to_string(msgTable),URL_SENDMESSAGE,header)
end

function Telegram:CheckConfig()
  if Telegram.Options["Token"]=="" then
    cecho("&lt;orange&gt;Token has not been set.\n")
    cecho("&lt;orange&gt;#TELEGRAM TOKEN &lt;token&gt; to set..\n")
  end
  local countAuthorized = 0
  for _ in pairs(Telegram.Options.Authorized) do countAuthorized = countAuthorized + 1 end
    
  if countAuthorized==0 then
    cecho("&lt;orange&gt;No one has been authorized. Send a message to the bot from Telegram, then!\n")
    cecho("&lt;orange&gt;#TELEGRAM AUTH &lt;charname&gt;\n")
  end
  
end


function Telegram:CheckAuthorized(from_username)
  if Telegram.Options.Authorized[from_username]==nil then
    return false
  else
    return true
  end
end

function Telegram:HandleCommand(cmd,message_id,chat_id,from_username)
  -- check if Authorized
  --print("check if "..from_username.." is authorized...")
  --display(Telegram.Authorized)
  --display(Telegram.Authorized[from_username])
 
  -- notify "On It"
  
  cecho("&lt;cyan&gt;Telegram (".. from_username ..") has asked me to: '"..cmd.."'\n")
  local retMsg = {}
  retMsg["chat_id"]=chat_id
  retMsg["text"]="on it"
  retMsg["reply_to_message_id"]=message_id
  retMsg["disable_notification"]=true
  
  current_message_id = message_id
  current_chat_id = chat_id
  
  --local header = {["Content-Type"] = "application/json"}
  --postHTTP(yajl.to_string(retMsg),URL_SENDMESSAGE,header)
  
  Telegram:SendMessage(retMsg)
  
  -- start capture
  lineBuffer = {}
  -- enable line trigger
  if Telegram.lineTriggerId then 
    killTrigger(Telegram.lineTriggerId)
    Telegram.lineTriggerId = nil
  end
  Telegram.lineTriggerId = tempLineTrigger(0,99,[[Telegram:CaptureLine()]])
  
  -- send command
  expandAlias(cmd)
  -- update last handled
  Telegram.LastIdHandled = message_id
  -- stop Capture
  -- send last 3 lines back
  return true
end

-- =========================================
--                   INIT
-- =========================================



-- kill all dynamic handlers
-- ... events
for i,handlerId in pairs(Telegram.EventHandlerIds) do
  if tonumber(handlerId) then
    killAnonymousEventHandler(handlerId)
    Telegram.EventHandlerIds[i]= nil
  end
end

-- ... Aliases
for i,handlerId in pairs(Telegram.AliasHandlerIds) do
  --print("Should remove alias "..handlerId)
  if tonumber(handlerId) then
    killAlias(handlerId)
    Telegram.AliasHandlerIds[i]= nil
  end
end


-- setup dynamic eventHandlers
table.insert(Telegram.EventHandlerIds,registerAnonymousEventHandler("sysPostHttpDone", [[Telegram:onHttpPost]]))
table.insert(Telegram.EventHandlerIds,registerAnonymousEventHandler("sysPostHttpError", [[Telegram:onHttpPost]]))

table.insert(Telegram.AliasHandlerIds,tempAlias([[^#(?i)(\btelegram\b|\bhelp\b|\bversion\b|\babout\b)(?-i)\s*(.*)$]],[[Telegram:HandleUserCommand(matches[2],matches[3])]]))


for i,handlerId in pairs(Telegram.AliasHandlerIds) do
  --print("Should remove alias "..handlerId)
  if tonumber(handlerId) then
    enableAlias(handlerId)
  end
end



-- manual handlers
if Telegram.getReturnHandler~=nil then
  killAnonymousEventHandler(Telegram.getReturnHandler)
end

if Telegram.getUpdateTimerId~=nil then
  killTimer(Telegram.getUpdateTimerId)
end
Telegram.getReturnHandler = registerAnonymousEventHandler("sysGetHttpDone", [[Telegram:onHttpGetDone]])
Telegram:LoadConfig()
Telegram.getUpdateTimerId = tempTimer(Telegram.Options.Interval,[[Telegram:getUpdates()]],true)
Telegram:CheckConfig()
--display(Telegram.Options)
Telegram:getInitialUpdates()</script>
			<eventHandlerList />
		</Script>
	</ScriptPackage>
	<KeyPackage />
	<HelpPackage>
		<helpURL></helpURL>
	</HelpPackage>
</MudletPackage>
